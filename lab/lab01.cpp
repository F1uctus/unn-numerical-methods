// –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, —Ä–µ–∞–ª–∏–∑—É—é—â—É—é –º–µ—Ç–æ–¥ –Ø–∫–æ–±–∏ —Ä–µ—à–µ–Ω–∏—è –°–õ–ê–£ x = b + ax
// –≤ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—è—Ö. –ù–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –°–õ–ê–£ —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é Œµ (Œµ=10^(-3),
// 10^(-4), 10^(-5)). –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
// –∏—Ç–µ—Ä–∞—Ü–∏–π. –ö—Ä–∏—Ç–µ—Ä–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:
// ‚Äñùë•^(i+1) ‚àí ùë•^i‚Äñ < ùúÄ1, ùúÄ1 = (1‚àí‚Äñùõº‚Äñ / ‚Äñùõº‚Äñ) ùúÄ
// ---
// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã –ê, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É—Ö–æ–¥—è –æ—Ç
// –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏—è. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å
// –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –°–õ–ê–£. –î–æ–±–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –±—ã–ª–æ –æ–∫–æ–ª–æ 1000.
// –í –∏—Ç–æ–≥–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –°–õ–ê–£
// –ê^‚àó ùë• = ùëì^‚àó.
// –î–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π –°–õ–ê–£ –∏ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –∏
// —Å—Ä–∞–≤–Ω–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏ –æ—Ü–µ–Ω–∫—É –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
// ‚àÜ= ‚Äñùë•^k ‚àí ùë•‚Äñ ‚â§ ‚Äñùõº‚Äñ^(ùëò+1) / (1‚àí‚Äñùõº‚Äñ) ‚Äñb‚Äñ.
// –°—Ä–∞–≤–Ω–∏—Ç—å –Ω–æ—Ä–º—ã –º–∞—Ç—Ä–∏—Ü –ê –∏ –ê‚àó.
// ---
// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
// –º–µ—Ç–æ–¥–∞ –Ø–∫–æ–±–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–∞—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ
// –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–µ—Ç–æ–¥–∞ –ó–µ–π–¥–µ–ª—è —Ä–µ—à–µ–Ω–∏—è –°–õ–ê–£ –≤ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—è—Ö. –°–∫–æ–ª—å–∫–æ
// –∏—Ç–µ—Ä–∞—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é Œµ
// –°–õ–ê–£ A x = f –∏ –°–õ–ê–£ A^* x = f^* –º–µ—Ç–æ–¥–æ–º –ó–µ–π–¥–µ–ª—è?

#include <iostream>
#include <cmath>
#include <vector>
using namespace std;

const int n = 5;
const float EPS[] = {1e-3, 1e-4, 1e-5};
const int MAX_ITER = 10000;

// –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –Ω–æ—Ä–º—ã –≤–µ–∫—Ç–æ—Ä–∞
float vector_norm(const vector<float>& vec) {
    float norm = 0;
    for (float v : vec) norm = max(norm, abs(v));
    return norm;
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–æ—Ä–º—ã –º–∞—Ç—Ä–∏—Ü—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç—Ä–æ–∫–∏)
float matrix_norm(const vector<vector<float>>& mat) {
    float norm = 0;
    for (const auto& row : mat) {
        float sum = 0;
        for (float val : row) sum += abs(val);
        norm = max(norm, sum);
    }
    return norm;
}

// –ú–µ—Ç–æ–¥ –Ø–∫–æ–±–∏
void jacobi(const vector<vector<float>>& alpha, const vector<float>& beta, 
            float epsilon, vector<float>& x, int& iterations) {
    vector<float> x_prev(n, 0);
    x = beta; // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
    float alpha_norm = matrix_norm(alpha);
    float epsilon1 = (1 - alpha_norm) / alpha_norm * epsilon;

    iterations = 0;
    while (iterations < MAX_ITER) {
        x_prev = x;
        vector<float> delta(n, 0);
        
        for (int i = 0; i < n; ++i) {
            delta[i] = beta[i];
            for (int j = 0; j < n; ++j) {
                if (i != j) delta[i] -= alpha[i][j] * x_prev[j];
            }
            x[i] = x_prev[i] + delta[i];
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∞
        vector<float> diff(n);
        for (int i = 0; i < n; ++i) diff[i] = x[i] - x_prev[i];
        if (vector_norm(diff) < epsilon1) break;
        
        iterations++;
    }
}

// –ú–µ—Ç–æ–¥ –ó–µ–π–¥–µ–ª—è
void seidel(const vector<vector<float>>& alpha, const vector<float>& beta, 
           float epsilon, vector<float>& x, int& iterations) {
    vector<float> x_prev(n, 0);
    x = beta;
    float alpha_norm = matrix_norm(alpha);
    float epsilon1 = (1 - alpha_norm) / alpha_norm * epsilon;

    iterations = 0;
    while (iterations < MAX_ITER) {
        x_prev = x;
        
        for (int i = 0; i < n; ++i) {
            float delta = beta[i];
            for (int j = 0; j < n; ++j) {
                if (j < i) delta -= alpha[i][j] * x[j];
                else if (j > i) delta -= alpha[i][j] * x_prev[j];
            }
            x[i] = x_prev[i] + delta;
        }
        
        vector<float> diff(n);
        for (int i = 0; i < n; ++i) diff[i] = x[i] - x_prev[i];
        if (vector_norm(diff) < epsilon1) break;
        
        iterations++;
    }
}

int main() {
    // –ò—Å—Ö–æ–¥–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ A —Å –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ–º
    vector<vector<float>> A = {
        {10, 1, 1, 1, 1},
        {1, 10, 1, 1, 1},
        {1, 1, 10, 1, 1},
        {1, 1, 1, 10, 1},
        {1, 1, 1, 1, 10}
    };
    
    vector<float> x_true = {1, 2, 3, 4, 5}; // –ò—Å—Ç–∏–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    vector<float> f(n, 0);
    
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ f
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            f[i] += A[i][j] * x_true[j];
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã A –∏ –≤–µ–∫—Ç–æ—Ä–∞ f –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    vector<vector<float>> alpha(n, vector<float>(n, 0));
    vector<float> beta(n);
    for (int i = 0; i < n; ++i) {
        float aii = A[i][i];
        beta[i] = f[i] / aii;
        for (int j = 0; j < n; ++j) {
            if (i != j) alpha[i][j] = A[i][j] / aii;
        }
    }
    
    // –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –Ø–∫–æ–±–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–æ—á–Ω–æ—Å—Ç–µ–π
    cout << "–ú–µ—Ç–æ–¥ –Ø–∫–æ–±–∏:\n";
    for (float eps : EPS) {
        vector<float> x(n);
        int iter;
        jacobi(alpha, beta, eps, x, iter);
        cout << "–¢–æ—á–Ω–æ—Å—Ç—å: " << eps << ", –∏—Ç–µ—Ä–∞—Ü–∏–π: " << iter << endl;
    }
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã A (–ø—Ä–∏–º–µ—Ä: —É–º–µ–Ω—å—à–∞–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
    vector<vector<float>> A_star = A;
    for (int i = 0; i < n; ++i) {
        A_star[i][i] *= 0.9; // –£–º–µ–Ω—å—à–∞–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ
    }
    
    // –ü–µ—Ä–µ—Å—á–µ—Ç –≤–µ–∫—Ç–æ—Ä–∞ f –¥–ª—è A*
    vector<float> f_star(n, 0);
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            f_star[i] += A_star[i][j] * x_true[j];
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    vector<vector<float>> alpha_star(n, vector<float>(n, 0));
    vector<float> beta_star(n);
    for (int i = 0; i < n; ++i) {
        float aii = A_star[i][i];
        beta_star[i] = f_star[i] / aii;
        for (int j = 0; j < n; ++j) {
            if (i != j) alpha_star[i][j] = A_star[i][j] / aii;
        }
    }
    
    // –†–µ—à–µ–Ω–∏–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç–æ–¥–æ–º –Ø–∫–æ–±–∏
    cout << "\n–ú–µ—Ç–æ–¥ –Ø–∫–æ–±–∏ –¥–ª—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã:\n";
    vector<float> x_star(n);
    int iter_star;
    jacobi(alpha_star, beta_star, 1e-5, x_star, iter_star);
    cout << "–ò—Ç–µ—Ä–∞—Ü–∏–π: " << iter_star << endl;
    
    // –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ó–µ–π–¥–µ–ª—è
    cout << "\n–ú–µ—Ç–æ–¥ –ó–µ–π–¥–µ–ª—è –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:\n";
    vector<float> x_seidel(n);
    int iter_seidel;
    seidel(alpha, beta, 1e-5, x_seidel, iter_seidel);
    cout << "–ò—Ç–µ—Ä–∞—Ü–∏–π: " << iter_seidel << endl;
    
    cout << "\n–ú–µ—Ç–æ–¥ –ó–µ–π–¥–µ–ª—è –¥–ª—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:\n";
    vector<float> x_seidel_star(n);
    int iter_seidel_star;
    seidel(alpha_star, beta_star, 1e-5, x_seidel_star, iter_seidel_star);
    cout << "–ò—Ç–µ—Ä–∞—Ü–∏–π: " << iter_seidel_star << endl;
    
    return 0;
}